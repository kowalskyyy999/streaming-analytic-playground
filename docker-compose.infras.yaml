version: '3.1'

networks:
  analytic-net:
    driver: bridge
    external: true

services:
  postgres:
    image: postgres:15.3
    container_name: db 
    ports:
      - 5433:5432
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - analytic-net

  zookeeper:
    image: zookeeper
    container_name: zookeeper
    restart: always
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181
    networks:
      - analytic-net
    depends_on:
      - postgres

  kafka:
    image: kafka-server:$KAFKA_VERSION
    build:
      context: ./kafka/images/server
      args:
        - KAFKA_VERSION=$KAFKA_VERSION
    container_name: kafka-server
    restart: always
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    networks:
      - analytic-net

  jobmanager:
    image: flink-with-connector:1.17.0-scala_2.12-java11 
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: jobmanager
    command: ["/bin/sh", "-c", "/opt/flink/bin/start-jobmanager.sh"]
    env_file:
      - .env
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
      - KAFKA_SOURCE_TOPIC=${KAFKA_SOURCE_TOPIC}
      - KAFKA_SINK_TOPIC=${KAFKA_SINK_TOPIC}
      - JOBMANAGER_ENDPOINT=${JOBMANAGER_ENDPOINT}
    ports:
      - 8081:8081
    networks:
      - analytic-net
    depends_on:
      - kafka

  taskmanager:
    image: flink-with-connector:1.17.0-scala_2.12-java11 
    build:
      context: ./flink
      dockerfile: Dockerfile
    container_name: taskmanager
    command: ["taskmanager"]
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 4
    networks:
      - analytic-net
    depends_on:
      - jobmanager

  starrocks-fe:
    image: starrocks-fe.3.2.8
    container_name: starrocks-fe
    build:
      context: ./starrocks/image/fe
      dockerfile: Dockerfile.fe
    volumes:
      - st-fe:/opt/starrocks/fe
    ports:
      - 8038:8030
      - 9038:9030
    networks:
      - analytic-net
    depends_on:
      - taskmanager
  
  starrocks-be:
    image: starrocks-be.3.2.8
    container_name: starrocks-be
    build:
      context: ./starrocks/image/be
      dockerfile: Dockerfile.be
    volumes:
      - st-be:/opt/starrocks/be
    ports:
      - 8048:8040
      - 9068:9060
    networks:
      - analytic-net
    depends_on:
      - starrocks-fe

  starrocks-cn:
    image: starrocks-cn.3.2.8
    container_name: starrocks-cn
    build:
      context: ./starrocks/image/cn
      dockerfile: Dockerfile.cn
    volumes:
      - st-cn:/opt/starrocks/be
    networks:
      - analytic-net
    depends_on:
      - starrocks-be

  # be:
  #   image: be:latest
  #   build:
  #     context: ./be
  #     dockerfile: Dockerfile
  #   container_name: be
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.01'
  #         memory: 50M
  #   networks:
  #     - analytic-net
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_HOST=${POSTGRES_HOST}
  #     - POSTGRES_PORT=${POSTGRES_PORT}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - KAFKA_BROKER=${KAFKA_BROKER}
  #     - KAFKA_TOPIC=${KAFKA_TOPIC}
  #   depends_on:
  #     - db
  #     - starrocks-cn
  #
  # ws:
  #   image: ws:latest
  #   build:
  #     context: ./ws
  #     dockerfile: Dockerfile
  #   container_name: ws
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.01'
  #         memory: 50M
  #   networks:
  #     - analytic-net
  #   environment:
  #     - KAFKA_BROKER=${KAFKA_BROKER}
  #     - KAFKA_TOPIC=${KAFKA_SINK_TOPIC}
  #   depends_on:
  #     - kafka-server
  #     - jobmanager 
  #     - be
  #
  # analytic-api:
  #   image: analytic-api:latest
  #   build:
  #     context: ./analytic_api
  #     dockerfile: Dockerfile
  #   container_name: analytic-api
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.01'
  #         memory: 50M
  #   networks:
  #     - analytic-net
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_HOST=${POSTGRES_HOST}
  #     - POSTGRES_PORT=${POSTGRES_PORT}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - STARROCKS_PASSWORD=${STARROCKS_PASSWORD}
  #     - STARROCKS_USER=${STARROCKS_USER}
  #     - STARROCKS_HOST=${STARROCKS_HOST}
  #     - STARROCKS_PORT=${STARROCKS_PORT}
  #   depends_on:
  #     - starrocks-cn
  #     - db
  #
  # fe:
  #   image: fe:latest
  #   build:
  #     context: ./fe
  #     dockerfile: Dockerfile
  #   container_name: fe
  #   environment:
  #     - VUE_APP_BACKEND_HOST=${VUE_APP_BACKEND_HOST}
  #     - VUE_APP_WS_HOST=${VUE_APP_WS_HOST}
  #     - VUE_APP_ANALYTIC_HOST=${VUE_APP_ANALYTIC_HOST}
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - be 
  #     - ws 
  #     - analytic-api
  # fe-server:
  #   image: starrocks-fe.3.2.8
  #   container_name: fe-server
  #   build:
  #     context: ./starrocks/image/fe
  #     dockerfile: Dockerfile.fe
  #   volumes:
  #     - st-fe:/opt/starrocks/fe
  #   ports:
  #     - 8038:8030
  #     - 9038:9030
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - kafka
  #
  # be-server:
  #   image: starrocks-be.3.2.8
  #   container_name: be-server
  #   build:
  #     context: ./starrocks/image/be
  #     dockerfile: Dockerfile.be
  #   volumes:
  #     - st-be:/opt/starrocks/be
  #   ports:
  #     - 8048:8040
  #     - 9068:9060
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - fe-server
  #
  # cn-server:
  #   image: starrocks-cn.3.2.8
  #   container_name: cn-server
  #   build:
  #     context: ./starrocks/image/cn
  #     dockerfile: Dockerfile.cn
  #   volumes:
  #     - st-cn:/opt/starrocks/be
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - be-server

  # jobmanager:
  #   image: flink-with-connector:1.17.0-scala_2.12-java11 
  #   build:
  #     context: ./flink
  #     dockerfile: Dockerfile
  #   container_name: jobmanager
  #   command: ["/bin/sh", "-c", "/opt/flink/bin/start-jobmanager.sh"]
  #   env_file:
  #     - .env
  #   environment:
  #     - KAFKA_BROKER=${KAFKA_BROKER}
  #     - KAFKA_SOURCE_TOPIC=${KAFKA_SOURCE_TOPIC}
  #     - KAFKA_SINK_TOPIC=${KAFKA_SINK_TOPIC}
  #     - JOBMANAGER_ENDPOINT=${JOBMANAGER_ENDPOINT}
  #   ports:
  #     - 8081:8081
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - kafka
  #
  # taskmanager:
  #   image: flink-with-connector:1.17.0-scala_2.12-java11 
  #   build:
  #     context: ./flink
  #     dockerfile: Dockerfile
  #   container_name: taskmanager
  #   command: ["taskmanager"]
  #   environment:
  #     - |
  #       FLINK_PROPERTIES=
  #       jobmanager.rpc.address: jobmanager
  #       taskmanager.numberOfTaskSlots: 4
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - jobmanager
  # be:
  #   image: analytic-be:latest
  #   build:
  #     context: ./be
  #     dockerfile: Dockerfile
  #   container_name: be_analytic
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.01'
  #         memory: 50M
  #   ports:
  #     - 9090:9090
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - taskmanager

  # fe:
  #   image: analytic-fe:latest
  #   build:
  #     context: ./fe
  #     dockerfile: Dockerfile
  #   container_name: fe_analytic
  #   ports:
  #     - 9000:80
  #   networks:
  #     - analytic-net

  # ksqldb:
  #   image: ksqldb-server
  #   build:
  #     context: ./ksqldb/images/server
  #     args:
  #       - KSQLDB_VERSION=0.29
  #   container_name: ksqldb-server
  #   ports:
  #     - 8088:8088
  #   networks:
  #     - analytic-net
  #   depends_on:
  #     - kafka
volumes:
  st-fe:
    external: true
  st-be:
    external: true
  st-cn:
    external: true
